{
  "comments": [
    {
      "key": {
        "uuid": "31673c6b_9c4f63b9",
        "filename": "core/fxcrt/fx_memory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-14T00:51:31Z",
      "side": 1,
      "message": "This looks a lot like FX_SafeAlloc() in the header. Can we deduplicate or did I miss something?",
      "revId": "a5e0016cfb37c1b93c2fdfcbb79bce695ca8d846",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e14b10f_5df31326",
        "filename": "core/fxcrt/fx_memory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5540
      },
      "writtenOn": "2017-06-20T00:41:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31673c6b_9c4f63b9",
      "revId": "a5e0016cfb37c1b93c2fdfcbb79bce695ca8d846",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4ead334_47855110",
        "filename": "core/fxcrt/fx_memory.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-14T00:51:31Z",
      "side": 1,
      "message": "nit: No need for blank line?",
      "revId": "a5e0016cfb37c1b93c2fdfcbb79bce695ca8d846",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60ae2144_16c08f00",
        "filename": "core/fxcrt/fx_memory.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 5540
      },
      "writtenOn": "2017-06-20T00:41:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4ead334_47855110",
      "revId": "a5e0016cfb37c1b93c2fdfcbb79bce695ca8d846",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c592703_6db39da9",
        "filename": "core/fxcrt/fx_memory.h",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-14T00:51:31Z",
      "side": 1,
      "message": "Do we need this check? Looking at the xrefs for the Chromium copy in base/allocator/partition_allocator/partition_alloc.h, I don\u0027t see any callers doing this.",
      "revId": "a5e0016cfb37c1b93c2fdfcbb79bce695ca8d846",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6647f3a6_c0cf1edc",
        "filename": "core/fxcrt/fx_memory.h",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 5540
      },
      "writtenOn": "2017-06-20T00:41:44Z",
      "side": 1,
      "message": "Unfortunately we do, at least as a stop-gap; various callers (CPDF_PageContentGeneratorTest.ProcessGraphics, pixel tests/pdfium_diff) actually are trying to free NULL. :(",
      "parentUuid": "5c592703_6db39da9",
      "revId": "a5e0016cfb37c1b93c2fdfcbb79bce695ca8d846",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bf4dc65_96a3c5a2",
        "filename": "core/fxcrt/fx_memory.h",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-22T06:16:34Z",
      "side": 1,
      "message": "I think callers are allowed to free NULL. So somewhere inside FX_Free() we have to check. Whether it be here or in PartitionFree().",
      "parentUuid": "6647f3a6_c0cf1edc",
      "revId": "a5e0016cfb37c1b93c2fdfcbb79bce695ca8d846",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e002045_7addae39",
        "filename": "core/fxcrt/fx_memory.h",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 5540
      },
      "writtenOn": "2017-06-22T17:10:02Z",
      "side": 1,
      "message": "Right. I chose to put the check here rather than in |PartitionFree| because adding it there would add a branch for all callers of PA â€” but only these PDFium callers need the check. (No other PA callers are trying to free NULL, and let\u0027s keep it that way.)\n\nAlthough libc does allow freeing NULL, I\u0027d like to keep PA\u0027s stricter behavior. Freeing NULL smells like a bug to me, and I like PA\u0027s clarity.\n\nI\u0027ve added a comment about how we should ultimately try to fix the callers that rely on being able to free NULL.",
      "parentUuid": "4bf4dc65_96a3c5a2",
      "revId": "a5e0016cfb37c1b93c2fdfcbb79bce695ca8d846",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47dd9f1_4c6af480",
        "filename": "xfa/fgas/font/cfgas_fontmgr.cpp",
        "patchSetId": 1
      },
      "lineNbr": 943,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-14T00:51:31Z",
      "side": 1,
      "message": "If you switched this away from FX_Alloc(). Do we still need this as a TODO? Can it just be a note to tell future readers not to use FX_Alloc? Or is the TODO really suppose to say \"let\u0027s use FX_Alloc() in the future.\" ?",
      "revId": "a5e0016cfb37c1b93c2fdfcbb79bce695ca8d846",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2b81014_918e29d0",
        "filename": "xfa/fgas/font/cfgas_fontmgr.cpp",
        "patchSetId": 1
      },
      "lineNbr": 943,
      "author": {
        "id": 5540
      },
      "writtenOn": "2017-06-20T00:41:44Z",
      "side": 1,
      "message": "It should be  \"let\u0027s use FX_Alloc() in the future.\". I\u0027ll change it.",
      "parentUuid": "a47dd9f1_4c6af480",
      "revId": "a5e0016cfb37c1b93c2fdfcbb79bce695ca8d846",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    }
  ]
}