{
  "comments": [
    {
      "key": {
        "uuid": "8cb60db8_e9b4606b",
        "filename": "fpdfsdk/fpdfannot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-06-26T14:56:28Z",
      "side": 1,
      "message": "Is empty a valid quadpoints value (and same question with Rect). If not, thoughts on returningthe QuadPointsF and using empty to denote failure?",
      "revId": "3fe7aaa29dfa291390ffd67adabc12f7ba01bd6b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac29f707_fd76af67",
        "filename": "fpdfsdk/fpdfannot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-06-26T15:30:12Z",
      "side": 1,
      "message": "I guess empty values should count as invalid, since the annotation wouldn\u0027t show up with empty. Changed the return type to be QuadPointsF.",
      "parentUuid": "8cb60db8_e9b4606b",
      "revId": "3fe7aaa29dfa291390ffd67adabc12f7ba01bd6b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "643d9d60_5bbe9ac5",
        "filename": "fpdfsdk/fpdfannot_embeddertest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-06-26T14:56:28Z",
      "side": 1,
      "message": "ASSERT_TRUE(annot !\u003d nullptr)\n\n(or if there is an ASSERT(annot) that would also work)",
      "revId": "3fe7aaa29dfa291390ffd67adabc12f7ba01bd6b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de01f63c_47fbe98c",
        "filename": "fpdfsdk/fpdfannot_embeddertest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-06-26T15:30:12Z",
      "side": 1,
      "message": "I don\u0027t see an ASSERT(condition). Why not ASSERT_TRUE(annot)? I see many other tests using ASSERT_TRUE(pointer) to check null for e.g. FPDF_Page.\nIf not, then how about ASSER_NE(nullptr, annot)?",
      "parentUuid": "643d9d60_5bbe9ac5",
      "revId": "3fe7aaa29dfa291390ffd67adabc12f7ba01bd6b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c5b5ce4_19ca741d",
        "filename": "fpdfsdk/fpdfannot_embeddertest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-06-26T15:35:53Z",
      "side": 1,
      "message": "I believe ASSERT_NE isn\u0027t allowed with nullptr. If we\u0027re doing ASSERT_TRUE(ptr) in other places then it\u0027s fine.",
      "parentUuid": "de01f63c_47fbe98c",
      "revId": "3fe7aaa29dfa291390ffd67adabc12f7ba01bd6b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eafd0fea_a92622fe",
        "filename": "fpdfsdk/fpdfannot_embeddertest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-27T02:20:32Z",
      "side": 1,
      "message": "There\u0027s a whole bunch of ASSERT_NE(nullptr, ptr) calls in our code base. Though I prefer just ASSERT_TRUE(ptr).",
      "parentUuid": "5c5b5ce4_19ca741d",
      "revId": "3fe7aaa29dfa291390ffd67adabc12f7ba01bd6b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cdbf824_8bc210d6",
        "filename": "fpdfsdk/fpdfannot_embeddertest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-06-27T14:37:27Z",
      "side": 1,
      "message": "Google Test supports EXPECT_EQ(NULL, ptr) and ASSERT_EQ(NULL, ptr) but not EXPECT_NE(NULL, ptr) and ASSERT_NE(NULL, ptr)\n\nfrom https://github.com/google/googletest/blob/master/googletest/docs/FAQ.md\n\nWhich means, those tests are probably wrong ....",
      "parentUuid": "eafd0fea_a92622fe",
      "revId": "3fe7aaa29dfa291390ffd67adabc12f7ba01bd6b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce89a521_ad3984b2",
        "filename": "fpdfsdk/fpdfannot_embeddertest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-27T20:31:13Z",
      "side": 1,
      "message": "NULL !\u003d nullptr. Since NULL is often #defined as 0, The underlying gtest comparsion mechanism does not like comparing 0 to a pointer. Whereas it can compare nullptr to a pointer.",
      "parentUuid": "8cdbf824_8bc210d6",
      "revId": "3fe7aaa29dfa291390ffd67adabc12f7ba01bd6b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "951e4ae3_34f61cfd",
        "filename": "fpdfsdk/fpdfannot_embeddertest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-06-27T20:33:46Z",
      "side": 1,
      "message": "Ah, interesting. Good to know, thanks.",
      "parentUuid": "ce89a521_ad3984b2",
      "revId": "3fe7aaa29dfa291390ffd67adabc12f7ba01bd6b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38351594_83939c1f",
        "filename": "fpdfsdk/fpdfannot_embeddertest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-06-27T20:42:16Z",
      "side": 1,
      "message": "If you read enough code, you\u0027ll see some places where one writes:\n\nEXPECT_EQ(reinterpret_cast\u003cFoo*\u003e(NULL), foo_ptr);\n\nX_X",
      "parentUuid": "951e4ae3_34f61cfd",
      "revId": "3fe7aaa29dfa291390ffd67adabc12f7ba01bd6b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    }
  ]
}