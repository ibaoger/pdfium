{
  "comments": [
    {
      "key": {
        "uuid": "21915cd7_60560b2f",
        "filename": "core/fpdfapi/page/cpdf_streamparser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T19:41:07Z",
      "side": 1,
      "message": "Nit: static before constructors.",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "991a8086_9b3d67e0",
        "filename": "core/fpdfapi/page/cpdf_streamparser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-07-13T20:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "21915cd7_60560b2f",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5311f3b9_f77ab78e",
        "filename": "core/fpdfapi/page/cpdf_streamparser.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T19:41:07Z",
      "side": 1,
      "message": "nit: Put statics before constructors.",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 16
      },
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22f0978e_5a47de6f",
        "filename": "core/fpdfapi/page/cpdf_streamparser.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T19:41:07Z",
      "side": 1,
      "message": "Drop the PDF_ prefix as this will need to be called as CPDF_StreamParser::DecodeInlineStream anyway.",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a94b6315_00873c50",
        "filename": "core/fpdfapi/page/cpdf_streamparser.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-07-13T20:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22f0978e_5a47de6f",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39272575_83b9453b",
        "filename": "core/fpdfapi/page/cpdf_streamparser.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-07-13T20:37:06Z",
      "side": 1,
      "message": "Done. Uh, how come I\u0027ve only seen static before constructors in our code base...",
      "parentUuid": "5311f3b9_f77ab78e",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 16
      },
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75027bba_8035c66d",
        "filename": "core/fpdfapi/page/cpdf_streamparser.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T20:58:37Z",
      "side": 1,
      "message": "We like to be different?",
      "parentUuid": "39272575_83b9453b",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 16
      },
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc28c9f6_ec8406d8",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T19:41:07Z",
      "side": 1,
      "message": "followup, convert LookupValueAndName and have it return the CFX_ByteString?",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a79c261_d8d60f83",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-07-13T20:37:06Z",
      "side": 1,
      "message": "Not sure if I got what you mean, are you saying this function should return CFX_ByteString directly instead of taking in CFX_ByteString*? But we have the CPDF_Object to return too? Unless you meant directly returning CFX_ByteString, but take in a pointer to CPDF_Object?",
      "parentUuid": "fc28c9f6_ec8406d8",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ede6f109_4a26d412",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T20:58:37Z",
      "side": 1,
      "message": "Oh, I didn\u0027t understand what this was doing, so, in this case I\u0027d almost like to see:\n\nCFX_ByteString csName;\nCFX_Object* obj;\nstd::tie(obj, csName) \u003d nameTree.LookupValueAndName(index);\nreturn obj;",
      "parentUuid": "4a79c261_d8d60f83",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f57a6a6f_8d66a41d",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-07-13T21:44:44Z",
      "side": 1,
      "message": "By almost, do you mean yes? :) I can open a bug and do this as a followup.",
      "parentUuid": "ede6f109_4a26d412",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d9d0e2f_b952d791",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T19:41:07Z",
      "side": 1,
      "message": "What about combining this with the above and just having the key passed in instead of the DATETYPE above? Similar to what we ended up with for annotations?",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9cb54cb_c3a4330d",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-07-13T20:37:06Z",
      "side": 1,
      "message": "I split them up for two reasons:\n1. These two functions treat the strings differently. Usually if we have a hex string value, we are supposed to decode it; i.e. if CreationDate or ModDate came in a hex string, then after decoding, we don\u0027t want to encode it again before passing back. However, checksum is just a 128 bit string, and if we return the decoded version, then it\u0027s going to be a non-sense string; so we have to encode it back to the original checksum hex string so it\u0027s usable. Hence GetAttachmentDate always get the unicode text, whereas in GetAttachmentCheckSum, we need to encode the stored string if it was hex. \n2. Unlike the annotation dictionary, in the filespec params dictionary, there\u0027re only a couple of defined dictionary entries, so these two should already cover everything without needing a custom key. (Unless someone says they want to add entries into the dictionary...?)\nWhat do you think?",
      "parentUuid": "0d9d0e2f_b952d791",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08550d11_4bac3c00",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T20:58:37Z",
      "side": 1,
      "message": "For 1, won\u0027t we be fine since you can do the same IsHex check you\u0027re doing here?\n\nIt would be nice to be consistent on how these APIs work, either going with general methods that take a String or individual methods ....",
      "parentUuid": "a9cb54cb_c3a4330d",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8217db5e_8c079197",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-07-13T21:44:44Z",
      "side": 1,
      "message": "For 1, the point is that for GetAttachmentDate(), regardless of whether the string is hex or not, we should always do GetUnicodeText - if it\u0027s hex, it\u0027s already decoded, so we just return it; if it\u0027s not hex, we also just return it. Whereas for checksum, if it\u0027s hex, then we need to encode it first before returning; if it\u0027s not hex, then we just return it. That\u0027s how they treat strings differently.  \nI thought it\u0027s simpler this way, but if we want to follow the annotation API pattern, we can still combine them by making a special case for checksum. Or, we can keep them separate, but have GetAttachmentDate() take in arbitrary strings. \nWhat do you think?",
      "parentUuid": "08550d11_4bac3c00",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ad23d45_ac058fb2",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T19:41:07Z",
      "side": 1,
      "message": "std::unique_ptr\u003cuint8_t, FX_FreeDeleter\u003e data(pFileStream-\u003eGetRawData()) ?",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a3a2e6b_8d62a3ae",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-07-13T20:37:06Z",
      "side": 1,
      "message": "I don\u0027t think that works with DecodeInlineStream().",
      "parentUuid": "8ad23d45_ac058fb2",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3c3e0e9_ff098f68",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T20:58:37Z",
      "side": 1,
      "message": "Just pass data.get() into DecodeInlineStream?",
      "parentUuid": "2a3a2e6b_8d62a3ae",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5029b0e0_ad6d7d59",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-07-13T21:44:44Z",
      "side": 1,
      "message": "Like \u0026data.get() right? Doesn\u0027t work because can\u0027t take address of unique ptr.",
      "parentUuid": "a3c3e0e9_ff098f68",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5320131e_0fd3b0cf",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T19:41:07Z",
      "side": 1,
      "message": "Should we get len first here and then do a quick:\nif (!buffer || buflen \u003c len)\n  return len;\n\nso we can avoid the below work? (and move this up above the GetRawData call)",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1421515f_697c38fb",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 6975
      },
      "writtenOn": "2017-07-13T20:37:06Z",
      "side": 1,
      "message": "That\u0027s a good suggestion, but I think the len returned by DecodeInlineStream() might differ (e.g. be smaller if truncated) from the len returned by GetRawSize(), so we need to call the big function anyways?",
      "parentUuid": "5320131e_0fd3b0cf",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f19eaf9_01216922",
        "filename": "fpdfsdk/fpdfattachment.cpp",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5965
      },
      "writtenOn": "2017-07-13T20:58:37Z",
      "side": 1,
      "message": "Ah, didn\u0027t realize len was an in-out parameter.",
      "parentUuid": "1421515f_697c38fb",
      "revId": "4c96f0cdd98e2bbf2f13c770a7f4a9776a360ec8",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    }
  ]
}