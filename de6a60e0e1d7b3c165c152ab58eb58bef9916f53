{
  "comments": [
    {
      "key": {
        "uuid": "008ed61d_a79916dd",
        "filename": "core/fpdfapi/parser/cpdf_security_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 288,
      "author": {
        "id": 5495
      },
      "writtenOn": "2017-08-02T20:17:38Z",
      "side": 1,
      "message": "Even though it costs more with the initiaization, we want to resize(), otherwise interDigest.size() is meaningless.",
      "range": {
        "startLine": 288,
        "startChar": 16,
        "endLine": 288,
        "endChar": 23
      },
      "revId": "de6a60e0e1d7b3c165c152ab58eb58bef9916f53",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "352be535_624c59c7",
        "filename": "core/fpdfapi/parser/cpdf_security_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 288,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-08-02T20:28:46Z",
      "side": 1,
      "message": "interdigest.size() is not used, though. Isn\u0027t the point of this call only to make sure there is space for the incoming data?",
      "parentUuid": "008ed61d_a79916dd",
      "range": {
        "startLine": 288,
        "startChar": 16,
        "endLine": 288,
        "endChar": 23
      },
      "revId": "de6a60e0e1d7b3c165c152ab58eb58bef9916f53",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e6beecc_3613e4cf",
        "filename": "core/fpdfapi/parser/cpdf_security_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 288,
      "author": {
        "id": 5495
      },
      "writtenOn": "2017-08-02T20:37:21Z",
      "side": 1,
      "message": "Not sure what guarantees the std library makes, this call may be advisory only?",
      "parentUuid": "352be535_624c59c7",
      "range": {
        "startLine": 288,
        "startChar": 16,
        "endLine": 288,
        "endChar": 23
      },
      "revId": "de6a60e0e1d7b3c165c152ab58eb58bef9916f53",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "252c9a37_c5584a4b",
        "filename": "core/fpdfapi/parser/cpdf_security_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 288,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-08-02T20:56:39Z",
      "side": 1,
      "message": "http://www.cplusplus.com/reference/vector/vector/reserve/\n\n\"Requests that the vector capacity be at least enough to contain n elements.\n\nIf n is greater than the current vector capacity, the function causes the container to reallocate its storage increasing its capacity to n (or greater).\"\n\nMy understanding is there is a guarantee interDigest will be at least iBlockSize elements long after this call, as long as the parameter isn\u0027t 0, and iBlockSize cannot be 0.\n\nWhich of the answers in the stack overflow link contradicts this?",
      "parentUuid": "5e6beecc_3613e4cf",
      "range": {
        "startLine": 288,
        "startChar": 16,
        "endLine": 288,
        "endChar": 23
      },
      "revId": "de6a60e0e1d7b3c165c152ab58eb58bef9916f53",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41271983_d0449eb5",
        "filename": "core/fpdfapi/parser/cpdf_security_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 288,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-08-02T21:02:10Z",
      "side": 1,
      "message": "I think I see what you mean - reserve could allocate a block of the new size, but only copy the contents and update whatever pointer field data() returns when the next insertion is made.\n\nI\u0027ll switch to resize, which I was avoiding due to the potential of shrinking the vector, but seems safer.",
      "parentUuid": "252c9a37_c5584a4b",
      "range": {
        "startLine": 288,
        "startChar": 16,
        "endLine": 288,
        "endChar": 23
      },
      "revId": "de6a60e0e1d7b3c165c152ab58eb58bef9916f53",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    }
  ]
}