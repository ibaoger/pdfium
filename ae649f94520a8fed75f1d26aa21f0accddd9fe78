{
  "comments": [
    {
      "key": {
        "uuid": "b25642ee_51014ca6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 29
      },
      "lineNbr": 19,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "Does the tilde actually get expanded properly in this example?",
      "range": {
        "startLine": 19,
        "startChar": 21,
        "endLine": 19,
        "endChar": 49
      },
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebf76c2a_d0f8418e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 29
      },
      "lineNbr": 19,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "Yes, os.path.expanduser does exactly that.",
      "parentUuid": "b25642ee_51014ca6",
      "range": {
        "startLine": 19,
        "startChar": 21,
        "endLine": 19,
        "endChar": 49
      },
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0c9cfa4_1bfca84c",
        "filename": "testing/tools/githelper.py",
        "patchSetId": 29
      },
      "lineNbr": 20,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "Do we want to instead just assume the user has a clean tree to start with?",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c42e0741_efca4eda",
        "filename": "testing/tools/githelper.py",
        "patchSetId": 29
      },
      "lineNbr": 20,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "No, we want to have the option of testing local changes.",
      "parentUuid": "b0c9cfa4_1bfca84c",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bb60dd1_dcab33ee",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 77,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "nit: no blank lines",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48e62c6b_3134361c",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 77,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "4bb60dd1_dcab33ee",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f97689b_748e1fa5",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 122,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "Instead of freezing the measurement script and checking out branches, what do you think of:\n\n1) Creating clones of the local PDFium repo.\n2) Use the clones.\n3) Delete the clones. (Don\u0027t bother with cleanup, it\u0027s like having disposable plates)\n\nTo make a clone efficiently-ish:\n\nmkdir pdfium_clone\ncd pdfium_clone/\ngclient config --cache-dir\u003d/path/to/cache https://pdfium.googlesource.com/pdfium.git\ngclient sync --revision pdfium@$HASH\n\nWith a warmed up cache, it takes 23 seconds to do the above on my workstation inside /run/shm. (Essentially on ramdisk) The cache is 1.4 GB and so is the cloned checkout.",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14d5f1d0_b18ebbf5",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 122,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "I thought of doing this, but some things become much more complex to implement. For example:\n- comparing local changes\n- using/comparing specific build flag configs\n- comparing commits that are not pushed\n- comparing specific versions of third_party libs",
      "parentUuid": "2f97689b_748e1fa5",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73c265fa_ffd21667",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 122,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-21T09:03:40Z",
      "side": 1,
      "message": "You can remove the upstream PDFium git repo URL with a local file:///path/to/pdfium/pdfium. Then any cloned repo has all the local commit hashes in your local git repo. Does that solve the local (saved?) changes issue, and the commits not pushed issue?\n\nUsing specific GN flags is just a matter of copying $build_dir/args.gn into the clone and running gn gen.\n\nIf you want to compare specific versions of anything that\u0027s checked out via DEPS, assuming there are hashes for them, then it\u0027s just a matter of having a local commit with changes to DEPS to update the hashes. gclient sync can do the rest.",
      "parentUuid": "14d5f1d0_b18ebbf5",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "312e9e06_d5566e29",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 122,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-21T15:17:29Z",
      "side": 1,
      "message": "Let me give this a try.",
      "parentUuid": "73c265fa_ffd21667",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbaf0894_96083bac",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 122,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-21T20:18:17Z",
      "side": 1,
      "message": "I have a version of this running on the most basic case (clean branch vs uncommitted changes). It takes around an extra 40s to run and downloads around 250MB during \"gclient sync\". That\u0027s even with the cache, without it it\u0027s 1.5GB.\n\nIt\u0027s certainly possible, but I\u0027m not sure the drawbacks are worth it. The process does feel cleaner than modifying the working branch and restoring it.\n\nProof-of-concept cl: https://pdfium-review.googlesource.com/c/8691/",
      "parentUuid": "312e9e06_d5566e29",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e9f231e_973ac3a3",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 203,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "Do we want to optionally take advantage of goma?",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38906536_01a3ee90",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 203,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "Doesn\u0027t this use goma or not depending on your gn args?",
      "parentUuid": "3e9f231e_973ac3a3",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "357bc687_72f2a00f",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 203,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-21T09:03:40Z",
      "side": 1,
      "message": "Yes, but if you know your GN configs are goma enabled, you can pass --use-goma to this script, and here it can build with a higher -j count. See tools/coverage/coverage_report.py.",
      "parentUuid": "38906536_01a3ee90",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a421ed9_9a4592dd",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 203,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-21T15:17:29Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "357bc687_72f2a00f",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f4a212e_8efae7e9",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 263,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "Should this check for KeyboardInterrupt and run pool.terminate() ? See testing/tools/test_runner.py.",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14b1834a_0b5564dc",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 263,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "The way test_runner.py tries to fix the problem does not work here (and I don\u0027t understand why it works in test_runner). I\u0027ve done this in another way now.",
      "parentUuid": "8f4a212e_8efae7e9",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcadc701_c1067a1f",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 306,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "Not needed after a return.",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "665cb0aa_db33a4b4",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 306,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcadc701_c1067a1f",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9342f76d_cc731909",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 399,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "Is it more useful to have branches or commits?",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a8f27d8_c960210e",
        "filename": "testing/tools/safetynet_compare.py",
        "patchSetId": 29
      },
      "lineNbr": 399,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "Either works, the flag is the same.",
      "parentUuid": "9342f76d_cc731909",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "804cc037_8661eda9",
        "filename": "testing/tools/safetynet_conclusions.py",
        "patchSetId": 29
      },
      "lineNbr": 10,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "Is there a built-in Python library to help with this?",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b468d6fc_9ad809bc",
        "filename": "testing/tools/safetynet_conclusions.py",
        "patchSetId": 29
      },
      "lineNbr": 10,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "Sadly no. There are third_party libraries, but I didn\u0027t think it would be worth to add them just for this.",
      "parentUuid": "804cc037_8661eda9",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "053527b8_0667e0ec",
        "filename": "testing/tools/safetynet_conclusions.py",
        "patchSetId": 29
      },
      "lineNbr": 30,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "How about a purple failed bike shed? (Buildbot uses purple for errors)",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04962d36_6afaa4a7",
        "filename": "testing/tools/safetynet_conclusions.py",
        "patchSetId": 29
      },
      "lineNbr": 30,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "053527b8_0667e0ec",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5dc14b40_a44fcbab",
        "filename": "testing/tools/safetynet_conclusions.py",
        "patchSetId": 29
      },
      "lineNbr": 86,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "Not seeing what this simplifies.",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca5bde2c_78b22c3d",
        "filename": "testing/tools/safetynet_conclusions.py",
        "patchSetId": 29
      },
      "lineNbr": 86,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "The json dict would return a mix of Nones and 0s without this. With this, it\u0027s consistent and always None.",
      "parentUuid": "5dc14b40_a44fcbab",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "269ee773_ce2187dc",
        "filename": "testing/tools/safetynet_conclusions.py",
        "patchSetId": 29
      },
      "lineNbr": 86,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-21T09:03:40Z",
      "side": 1,
      "message": "Can you mention that in the comment?",
      "parentUuid": "ca5bde2c_78b22c3d",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "524bed9c_5bf1bf8f",
        "filename": "testing/tools/safetynet_conclusions.py",
        "patchSetId": 29
      },
      "lineNbr": 86,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-21T15:17:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "269ee773_ce2187dc",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7824f16a_3826505a",
        "filename": "testing/tools/safetynet_conclusions.py",
        "patchSetId": 29
      },
      "lineNbr": 250,
      "author": {
        "id": 5045
      },
      "writtenOn": "2017-07-20T07:12:12Z",
      "side": 1,
      "message": "Since the argument to format() is constant, why not just write out: print \"  the string you want\" ?\n\nAlso, rharrison and I were talking about format() vs % operator, and we went with % operator.\n\nprint \u0027%11s %15s  %s\u0027 % (\u0027% Change\u0027, \u0027Time after\u0027, \u0027Test case\u0027)",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e16b683_649646c0",
        "filename": "testing/tools/safetynet_conclusions.py",
        "patchSetId": 29
      },
      "lineNbr": 250,
      "author": {
        "id": 7035
      },
      "writtenOn": "2017-07-20T19:55:45Z",
      "side": 1,
      "message": "On the first point, this way makes it clear how many characters are allocated for each column without the need of counting and is resilient to changes. If we change, for example, \"Time after\" to \"TimeAfter\" it would not break the alignment.\n\nOn format vs %, on this line it would be fine, but on the print below (in this same method, inside the loop) we want to add thousand comma separators, and it\u0027s much harder to do this with % - it involves manipulating the locale.",
      "parentUuid": "7824f16a_3826505a",
      "revId": "ae649f94520a8fed75f1d26aa21f0accddd9fe78",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    }
  ]
}